<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Week Two on Xtern Bootcamp 2018</title>
    <link>http://xtbc18s1.github.io/week2/</link>
    <description>Recent content in Week Two on Xtern Bootcamp 2018</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    
	<atom:link href="http://xtbc18s1.github.io/week2/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Day 5: Intro to React</title>
      <link>http://xtbc18s1.github.io/week2/day5/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://xtbc18s1.github.io/week2/day5/</guid>
      <description>Monday, May 21, 2018
Lecture Videos Morning:
 Playlist | Day 5, Part 1  Afternoon:
 Playlist | Day 5, Part 1  Topics DOM Manipulation  contenteditable - MDN documentation keypress events  ES2015+ (ES6+)  Inheritance (with the ES2015 class syntax; it&amp;rsquo;s still prototypal inheritance though) - ES2015 classes on Babel Modules (import/export) - ES2015 modules on Babel  React  Imperative vs. Declarative Components  JSX - Docs: Introducing JSX Props - Docs: Components and Props State - Docs: State and Lifecycle  create-react-app  Examples DOM Manipulation contentEditable is a property that, like the name suggests, allows the content of an HTML element to be edited through user interaction with the DOM (similar to a text input field).</description>
    </item>
    
    <item>
      <title>Day 6: React</title>
      <link>http://xtbc18s1.github.io/week2/day6/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://xtbc18s1.github.io/week2/day6/</guid>
      <description>Tuesday, May 22, 2018
Recap  Reactrobats (take two): Morning  Lecture Videos Morning:
 Playlist | Day 6, Part 1  Afternoon:
 Playlist | Day 6, Part 1  Topics Scope  Variable Scope (var, const, let)  React  Using map with components Stateless Functional Components  Functional Stateless Components in React Functional Components vs. Stateless Functional Components vs. Stateless Components Nine Wins You Might Have Overlooked  CSS in JS  Examples Variable Scope The biggest difference between var and let is that var variables are scoped to the function in which they are declared, while let variables are scoped to the block in which they are declared.</description>
    </item>
    
    <item>
      <title>Day 7: Props and Restructuring</title>
      <link>http://xtbc18s1.github.io/week2/day7/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://xtbc18s1.github.io/week2/day7/</guid>
      <description>Wednesday, May 23, 2018
Lecture Videos Morning:
 Playlist | Day 7, Part 1  Afternoon:
 Playlist | Day 7, Part 1  Topics CSS-in-JS  Aphrodite: Support for colocating your styles with your JavaScript component.  React  Methods as props Controlled vs Uncontrolled Forms Controlled and uncontrolled form inputs in React don&amp;rsquo;t have to be complicated  JavaScript  Destructuring assignment Spread operator Property initializers (and arrow functions)  Examples React Methods as props Sometimes one component needs to update another component&amp;rsquo;s state.</description>
    </item>
    
    <item>
      <title>Day 8: Firebase Authentication</title>
      <link>http://xtbc18s1.github.io/week2/day8/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://xtbc18s1.github.io/week2/day8/</guid>
      <description>Thursday, May 24, 2018
Morning:
 Playlist | Day 8, Part 1  Afternoon:
 Playlist | Day 8, Part 1  Topics Local Storage Firebase Authentication  &amp;lsquo;firebase/auth&amp;rsquo; authWithPopup signing in and out handling auth state changes database rules  Examples Local Storage and How To Use It On Websites Authentication Firebase isn&amp;rsquo;t just a real-time database. It can also provide authentication services via email/password, phone, or common third-party services like Github, Facebook, and Google.</description>
    </item>
    
  </channel>
</rss>